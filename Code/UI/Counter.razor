@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    <div class="counter">
        <div class="state @State.ToString().ToLower()">
            @if (State == GameState.Playing && GameManager.Current?.CurrentMinigame != null)
            {
                @GameManager.Current.CurrentMinigame.Name
            }
            else
            {
                @State
            }
        </div>
        <div class="time">
            @if (State == GameState.Intermission && !(GameManager.Current?.HasMinimumPlayers() ?? false))
            {
                <span class="waiting">Waiting for players...</span>
            }
            else
            {
                @FormatTime(Math.Max(0, TimeLeft))
            }
        </div>
    </div>
</root>

@code
{
    public GameState State => GameManager.Current?.State ?? GameState.Intermission;

    public float TimeLeft => GameManager.Current?.State switch
    {
        GameState.Intermission => GameManager.INTERMISSION_DURATION - GameManager.Current.TimeSinceStateStart,
        GameState.Playing => GameManager.MINIGAME_DURATION - GameManager.Current.TimeSinceStateStart,
        GameState.Pause => GameManager.PAUSE_DURATION - GameManager.Current.TimeSinceStateStart,
        _ => 0
    };

    private string FormatTime(float seconds)
    {
        int minutes = (int)(seconds / 60);
        int secs = (int)(seconds % 60);
        return $"{minutes:00}:{secs:00}";
    }

    protected override int BuildHash() => HashCode.Combine(TimeLeft, State, GameManager.Current?.HasMinimumPlayers());
}